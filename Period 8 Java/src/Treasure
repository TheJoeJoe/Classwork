package caveExplorer;

import java.util.Scanner;

public class TwoDArray {
	
	public static Scanner in = new Scanner(System.in);
	static String[][] arr2D;
	static String[][] pic;
	static int starti;
	static int startj;
	static int treasurei;
	static int treasurej;

	
	public static void main(String[] args) {
		arr2D = new String[5][5];
		pic = new String[5][5];
		for(int row = 0; row < arr2D.length; row ++){
			//populate with coordinates
			for(int col = 0; col < arr2D.length; col ++){
				arr2D[row][col] = "("+row+" , "+col+")";
			}
		}
		starti = 2;
		startj = 2;
		treasurei = 4;
		treasurej = 3;
		startExploring();
		}

	private static void startExploring() {
		while(true){
			//printPic(pic);
			System.out.println("You are in room" + arr2D[starti][startj]);
			if(starti == treasurei && startj == treasurej){
				break;
			}
			System.out.println("What do you want to do?");
			String input = in.nextLine();
			int[] newCoordinates = interpretInput(input);
			starti = newCoordinates[0];
			startj = newCoordinates[1];
		}
		System.out.println("Congratulations you win.");
	}

	private static int[] interpretInput(String input) {
		//Verify input is valid
		while(!isValid(input)){
			System.out.println("Sorry, in this game, you can only use the w, a, s, d controls.");
			System.out.println("Tell me again what you would liek to do");
			input = in.nextLine();
		}
		int currenti = starti;
		int currentj = startj;
		input = input.toLowerCase();
		if(input.equals("w"))currenti--;
		if(input.equals("s"))currenti++;
		if(input.equals("a"))currentj--;
		if(input.equals("d"))currentj++;
		int[] newCoordinates = {starti, startj};
		if(currenti >= 0 && currenti < arr2D.length && currentj >= 0 && currentj < arr2D[0].length){
			newCoordinates[0] = currenti;
			newCoordinates[1] = currentj;
		}else{
			System.out.println("Sorry you reached the edge.");
		}
		return null;
	}

	private static boolean isValid(String input) {
		String[] validKeys = {"w", "a", "s", "d"};
		for(String key : validKeys){
			if(input.toLowerCase().equals(key)){
				return true;
			}
		}
		return false;
	}

	private static void plantMines(boolean[][] mines) {
		int numberOfMines = 10;
		while (numberOfMines > 0) {
			int row = (int) (Math.random() * mines.length);
			int col = (int) (Math.random() * mines[0].length);
			// this prevents the same mine being selected twice
			// while(mines[row][col]){
			// row = (int)(Math.random() * mines.length);
			// col = (int)(Math.random() * mines[0].length);
			// }
			if (!mines[row][col]) {
				mines[row][col] = true;
				numberOfMines--;
			}
		}
	}

	private static String[][] createField(boolean[][] mines) {
		String[][] field = new String[mines.length][mines[0].length];
		for (int row = 0; row < field.length; row++) {
			for (int col = 0; col < field[row].length; col++) {
				if (mines[row][col])
					field[row][col] = "X";
				else {
					field[row][col] = countNearby(mines, row, col);
				}
			}
		}
		return field;
	}

	private static String countNearby(boolean[][] mines, int row, int col) {
//		for (int r = row - 1; r < row + 1; r++) {
//			for (int c = col - 1; c <= col + 1; c++) {
//				if (r >= 0 && r < mines.length && c >= 0 && c < mines[0].length) {
//					
//					
//				}
//			}
//		}
		//this method only considers actual elements 
//		int count = 0;
//		for(int r = 0; r < mines.length; r++){
//			for(int c = 0; c < mines[r].length; c++){
//				if(Math.abs(r-row)+Math.abs(c-col) == 1 && mines[r][c]){
//					count ++;
//				}
//			}
//		}
//		return ""+count;
		//this method allow you to be most specific
		//for example, you only want North and East
		int count = 0;
		count += isValidAndTrue(mines, row - 1, col);
		count += isValidAndTrue(mines, row + 1, col);
		count += isValidAndTrue(mines, row, col - 1);
		count += isValidAndTrue(mines, row, col + 1);
		return""+count;
	}
	
	private static int isValidAndTrue(boolean[][] mines, int i, int j) {
		if(i >= 0 && i < mines.length && j >= 0 && j < mines[0].length && mines[i][j])
		return 1;
		else return 0;
	}

	public static void printPic(String[][] arr2d) {
		for (int i = 0; i != arr2d.length; i++) {
			for (int j = 0; j != arr2d[i].length; j++) {
				if (arr2d[i][j] == null)
					System.out.print(" ");
				else
					System.out.print(arr2d[i][j]);
			}
			System.out.println();
		}
	}
	public static void mines(){
		boolean[][] mines = new boolean[6][6];
		plantMines(mines);
		String[][] field = createField(mines);
		printPic(field);
	}
}
